import logging

from aiogram import Router, types, F, Bot
from aiogram.filters import StateFilter
from aiogram.types import BufferedInputFile
from pyrogram.types import User

from utils.keyboards import broadcast_mk, start_kb, broadcast_kb, active_users_kb, broadcast_time_kb, \
    active_users_multiple, main_menu_broadcast
from utils.scripts import broadcast_one, broadcast_multiply
from utils.sessions.session_manager import session_manager
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.markdown import html_decoration
from io import BytesIO

router = Router()

users = []
text = ''


class StatesState(StatesGroup):
    waiting_text = State()
    waiting_photo = State()
    broadcasting_preview = State()
    broadcast_time_state = State()

    select_users_state = State()


@router.callback_query(F.data == 'broadcast')
async def broadcast(call: types.CallbackQuery):
    await call.message.edit_text('ü¶æ <b>–°–∫–æ–ª—å–∫–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?</b> –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ '
                                 '–∞–∫–∫–∞—É–Ω—Ç–æ–≤', reply_markup=broadcast_mk.as_markup())


@router.callback_query(F.data == 'broadcast_back')
async def back(call: types.CallbackQuery, state: FSMContext):
    if call.message.photo:
        await call.message.delete()
        await call.message.answer(f'üî• –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ¬´–Æ–∑–µ—Ä –ö–æ–Ω—Ç—Ä–æ–ª—å –ë–æ—Ç–∞¬ª\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ', reply_markup=start_kb.as_markup())
        await state.clear()
    else:
        await call.message.edit_text(f'üî• –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ¬´–Æ–∑–µ—Ä –ö–æ–Ω—Ç—Ä–æ–ª—å –ë–æ—Ç–∞¬ª\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ', reply_markup=start_kb.as_markup())
        await state.clear()


@router.callback_query(F.data == 'broadcast_multiple')
async def broadcast_multiple(call: types.CallbackQuery, state: FSMContext):
    for user_id, client in session_manager.active_sessions.items():
        try:
            me: User = await client.get_me()
            users.append(me.id)
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ {user_id}: {e}")

    if not users:
        await call.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.")
        await state.clear()
        return

    await call.message.edit_text('ü§ñ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç.</b> –í—ã–±—Ä–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –±—É–¥—É—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–∞—Å—Å—ã–ª–∫–µ', reply_markup=await active_users_multiple(state))
    await state.set_state(StatesState.select_users_state)


@router.callback_query(F.data.startswith('broadcast-user-multiple'), StatesState.select_users_state)
async def select_user(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    key = f"btn_{call.data.split('_')[2]}"

    current = data.get(key, False)
    new_value = not current

    if new_value == current:
        return

    await state.update_data({key: new_value})

    new_markup = await active_users_multiple(state)

    if call.message.reply_markup == new_markup:
        return

    await call.message.edit_reply_markup(reply_markup=new_markup)
    await call.answer("–û–±–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ" if new_value else "–û—Ç–∫–ª—é—á–µ–Ω–æ ‚ùå")


@router.callback_query(F.data == 'broadcast_go')
async def start_editing(call: types.CallbackQuery, state: FSMContext):
    clients = []

    data = await state.get_data()

    # –ü–æ–ª—É—á–∞–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    selected_ids = [int(k.split('_')[1]) for k, v in data.items() if k.startswith('btn_') and v is True]

    if not selected_ids:
        await call.answer("‚ùå –ù–∏–∫—Ç–æ –Ω–µ –≤—ã–±—Ä–∞–Ω")
        return

    # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫–ª–∏–µ–Ω—Ç—ã
    for user_id, client in session_manager.active_sessions.items():
        try:
            me: User = await client.get_me()
            if me.id in selected_ids:
                users.append(me.id)
                clients.append(client)
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ {user_id}: {e}")

    # –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    if not users:
        await call.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.")
        await state.clear()
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ FSM: —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ user_ids
    await state.update_data(broadcast_clients=clients, broadcast_user_ids=users, multiply=True)

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
    await state.set_state(StatesState.broadcasting_preview)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –û–î–ù–û —Å–æ–æ–±—â–µ–Ω–∏–µ
    await call.message.edit_text(
        f"‚òòÔ∏è –†–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ {len(users)} –∞–∫–∫–∞—É–Ω—Ç(–æ–≤).",
        reply_markup=broadcast_kb()
    )


@router.callback_query(F.data == 'broadcast_one')
async def broadcast_1(call: types.CallbackQuery):
    for user_id, client in session_manager.active_sessions.items():
        try:
            me: User = await client.get_me()
            users.append(me.id)
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ {user_id}: {e}")

    if not users:
        await call.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.")
        return
    await call.message.edit_text(f'ü§ñ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç.</b> –í—ã–±—Ä–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –±—É–¥—É—Ç —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–∞—Å—Å—ã–ª–∫–µ', reply_markup=await active_users_kb())


@router.callback_query(F.data.startswith("broadcast_user_"))
async def select_user(call: types.CallbackQuery, state: FSMContext):
    data = call.data.split('_')

    for user_id, client in session_manager.active_sessions.items():
        try:
            me: User = await client.get_me()
            if me.id == int(data[2]):
                await call.message.edit_text(f'‚òòÔ∏è–†–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è: {me.first_name}', reply_markup=broadcast_kb())
                users.append(me.id)
                await state.update_data(client=client)
                await state.set_state(StatesState.broadcasting_preview)
        except Exception as e:
            await call.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n\n")
            await state.clear()


# === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ ===
@router.callback_query(F.data == 'broadcast_add_text', StatesState.broadcasting_preview)
async def add_text(call: types.CallbackQuery, state: FSMContext):
    if call.message.photo:
        await call.message.edit_caption(call.inline_message_id, 'üìÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏', reply_markup=None)
    else:
        await call.message.edit_text('üìÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏', reply_markup=None)
    await state.set_state(StatesState.waiting_text)


@router.message(StatesState.waiting_text)
async def check_text(message: types.Message, state: FSMContext):
    await message.delete()

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    formatted_text = html_decoration.unparse(message.text, message.entities)

    await state.update_data(message_text=formatted_text)

    data = await state.get_data()
    photo = data.get("photo")

    if photo:
        await message.answer_photo(photo=photo, caption=formatted_text,
                                   reply_markup=broadcast_kb())
    else:
        await message.answer(formatted_text, reply_markup=broadcast_kb())

    await state.set_state(StatesState.broadcasting_preview)


# === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ ===
@router.callback_query(F.data == 'broadcast_add_photo', StatesState.broadcasting_preview)
async def add_photo(call: types.CallbackQuery, state: FSMContext):
    if call.message.text:
        await call.message.edit_text("üñº –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏", reply_markup=None)
    else:
        await call.message.answer("üñº –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")

    await state.set_state(StatesState.waiting_photo)


@router.message(StatesState.waiting_photo, F.photo)
async def check_photo(message: types.Message, state: FSMContext, bot: Bot):
    await message.delete()

    # –°–∫–∞—á–∏–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
    file = await bot.get_file(message.photo[-1].file_id)
    byte_stream = BytesIO()
    await bot.download_file(file.file_path, destination=byte_stream)
    byte_stream.seek(0)
    photo = BufferedInputFile(byte_stream.read(), filename="photo.jpg")
    await state.update_data(photo=photo)

    # –î–æ—Å—Ç–∞—ë–º —Ç–µ–∫—Å—Ç (–µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å)
    data = await state.get_data()
    message_text = data.get("message_text", "")

    await message.answer_photo(photo=photo, caption=message_text,
                               reply_markup=broadcast_kb())

    await state.set_state(StatesState.broadcasting_preview)


@router.callback_query(F.data == 'broadcast_time')
async def broadcast_time(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer('‚è≥ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è', reply_markup=broadcast_time_kb())
    await state.set_state(StatesState.broadcast_time_state)


@router.callback_query(lambda c: c.data and c.data.startswith('broadcast_time_'),
                       StateFilter(StatesState.broadcast_time_state))
async def select_time(call: types.CallbackQuery, state: FSMContext):
    data = call.data.split('_')[2]

    if data == 'one':
        await state.update_data(broad_time='0')
    elif data == '1':
        await state.update_data(broad_time='1')
    elif data == '3':
        await state.update_data(broad_time='3')
    elif data == '6':
        await state.update_data(broad_time='6')

    await state.set_state(StatesState.broadcasting_preview)
    await call.message.delete()


@router.callback_query(F.data == 'broadcast_run', StatesState.broadcasting_preview)
async def send(call: types.CallbackQuery, state: FSMContext, bot: Bot):
    data = await state.get_data()
    if data.get('multiply', False):
        message_text = data.get('message_text')
        clients = data.get('broadcast_clients')
        broad_time = int(data.get('broad_time', 0))
        photo = None
        await call.message.delete()
        await call.message.answer('–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!')
        if call.message.photo:
            file = await bot.get_file(call.message.photo[-1].file_id)
            byte_stream = BytesIO()
            await bot.download_file(file.file_path, destination=byte_stream)
            byte_stream.seek(0)
            byte_stream.name = 'image.jpg'
            photo = byte_stream
        try:
            broad = await broadcast_multiply(clients, message_text, broad_time, photo)
            await call.message.answer(f'–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–£—Å–ø–µ—à–Ω–æ: {broad[0]}\n–ù–µ—É–¥–∞—á–Ω–æ: {broad[1]}')
        except Exception as e:
            await call.message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n\n")
        await state.clear()
    else:
        message_text = data.get('message_text')
        client = data.get('client')
        broad_time = int(data.get('broad_time', 0))
        photo = None
        await call.message.delete()
        await call.message.answer('‚åõÔ∏è –†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –í—ã —Ç–∞–∫ –∂–µ –º–æ–∂–µ—Ç–µ –∑–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –¥–æ—Å—Ä–æ—á–Ω–æ')
        if call.message.photo:
            file = await bot.get_file(call.message.photo[-1].file_id)
            byte_stream = BytesIO()
            await bot.download_file(file.file_path, destination=byte_stream)
            byte_stream.seek(0)
            byte_stream.name = 'image.jpg'
            photo = byte_stream
        try:
            broad = await broadcast_one(client, message_text, broad_time, photo)
            await call.message.answer(f'<b>üèÅ –†–ê–°–°–´–õ–ö–ê –ó–ê–ö–û–ù–ß–ï–ù–ê!</b>\n<u>üí≠ –ß–∞—Ç—ã:</u>\n<blockquote>‚úÖ –£—Å–ø–µ—à–Ω–æ: <b>{broad[0]} —á–∞—Ç–æ–≤</b>\nüö´ –ù–µ —É–¥–∞—á–Ω–æ: <b>{broad[1]} —á–∞—Ç–æ–≤</b></blockquote>', reply_markup=main_menu_broadcast.as_markup())
        except Exception as e:
            await call.message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n\n")
        await state.clear()


@router.callback_query(F.data == 'broadcast_all')
async def broadcast_all(call: types.CallbackQuery, state: FSMContext):
    clients = []
    for user_id, client in session_manager.active_sessions.items():
        try:
            me: User = await client.get_me()
            users.append(me.id)
            clients.append(client)
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ {user_id}: {e}")

    if not users:
        await call.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.")
        await state.clear()
        return

    await state.update_data(broadcast_clients=clients, broadcast_user_ids=users, multiply=True)

    await state.set_state(StatesState.broadcasting_preview)

    await call.message.edit_text(
        f"‚òòÔ∏è –†–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ {len(users)} –∞–∫–∫–∞—É–Ω—Ç(–æ–≤).",
        reply_markup=broadcast_kb()
    )
