import asyncio
from pathlib import Path

from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from pyrogram import Client
from pyrogram.errors import SessionPasswordNeeded

from config import api_id, api_hash, test_mode
from utils.keyboards import start_kb
from utils.sessions.session_manager import session_manager
from utils.sessions.add_userbots import start_pyrogram

router = Router()

SESSION_DIR = Path("sessions")
SESSION_DIR.mkdir(exist_ok=True)


class AuthStates(StatesGroup):
    waiting_for_phone = State()
    waiting_for_code = State()
    waiting_for_password = State()
    waiting_for_code2 = State()


@router.message(Command('start'))
async def add_client(message: types.Message):
    if not session_manager.active_sessions:
        await message.answer(
            f"üîë –ü—Ä–∏–≤–µ—Ç {message.from_user.full_name}\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏"
        )
        return

    await message.answer(f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {message.from_user.full_name}.', reply_markup=start_kb.as_markup())


@router.message(Command("add"))
async def cmd_add(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +48668412234):")
    await state.set_state(AuthStates.waiting_for_phone)


async def create_client(session_path: Path) -> Client:
    client = Client(
        name=session_path.as_posix(),
        api_id=api_id,
        api_hash=api_hash,
        in_memory=True,
        test_mode=test_mode
    )

    return client


@router.message(AuthStates.waiting_for_phone, F.text.regexp(r'^\+[0-9]{11,15}$'))
async def process_phone(message: types.Message, state: FSMContext):
    phone = message.text
    session_path = SESSION_DIR / f"session_{phone}"

    try:
        client = Client(
            name=session_path.as_posix(),
            api_id=api_id,
            api_hash=api_hash,
            in_memory=True,
            test_mode=test_mode
        )

        await client.connect()
        sent_code = await client.send_code(phone)

        await state.update_data(
            phone=phone,
            phone_code_hash=sent_code.phone_code_hash,
            client=client
        )

        await message.answer("–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ SMS:")
        await state.set_state(AuthStates.waiting_for_code)

    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
        await state.clear()


@router.message(AuthStates.waiting_for_code, F.text.regexp(r'^\d+$'))
async def process_code(message: types.Message, state: FSMContext):
    data = await state.get_data()
    client = data["client"]
    code = message.text

    try:
        await client.sign_in(
            phone_number=data["phone"],
            phone_code=code,
            phone_code_hash=data["phone_code_hash"]
        )

        if await session_manager.save_session(data["phone"], client):
            try:
                session_path = SESSION_DIR / f"session2_{data['phone']}"
                client = await create_client(session_path)
                await client.connect()
                sent_code = await client.send_code(data['phone'])
                await state.update_data(phone_code_hash2=sent_code.phone_code_hash,
                                        client2=client)
                await message.answer("–ö–æ–¥ 2 –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ SMS:")

                await state.set_state(AuthStates.waiting_for_code2)
            except Exception as e:
                await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
                await state.clear()
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é")
            await state.clear()

    except SessionPasswordNeeded:
        await message.answer("üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å 2FA:")
        await state.set_state(AuthStates.waiting_for_password)

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        await state.clear()


@router.message(AuthStates.waiting_for_password)
async def process_password(message: types.Message, state: FSMContext):
    data = await state.get_data()
    client = data["client"]
    password = message.text

    try:
        await client.check_password(password)

        if await session_manager.save_session(data["phone"], client):
            try:
                session_path = SESSION_DIR / f"session2_{data['phone']}"
                client = await create_client(session_path)
                await client.connect()
                sent_code = await client.send_code(data['phone'])
                await state.update_data(phone_code_hash2=sent_code.phone_code_hash,
                                        client2=client, password=password)
                await message.answer("–ö–æ–¥ 2 –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ SMS:")

                await state.set_state(AuthStates.waiting_for_code2)
            except Exception as e:
                await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
                await state.clear()
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@router.message(AuthStates.waiting_for_code2)
async def process_code2(message: types.Message, state: FSMContext):
    data = await state.get_data()
    client = data["client2"]
    code = message.text
    password = data.get('password', None)

    try:
        await client.sign_in(
            phone_number=data["phone"],
            phone_code=code,
            phone_code_hash=data["phone_code_hash2"]
        )

        if await session_manager.save_second_session(data["phone"], client):
            me = await client.get_me()
            await message.answer(
                f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!\n"
                f"üë§ –ò–º—è: {me.first_name}\n"
                f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: +{me.phone_number}"
            )

            await message.answer("‚úÖ –°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            asyncio.create_task(start_pyrogram(f'ses_{me.phone_number}', await client.export_session_string()))
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é")
            await state.clear()
    except SessionPasswordNeeded:
        try:
            await client.check_password(password)
            if await session_manager.save_second_session(data["phone"], client):
                me = await client.get_me()
                await message.answer(
                    f"‚úÖ 2FA –ø—Ä–æ–π–¥–µ–Ω–∞!\n"
                    f"üë§ –ò–º—è: {me.first_name}\n"
                    f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: +{me.phone_number}"
                )
                await message.answer("‚úÖ –°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                asyncio.create_task(start_pyrogram(f'ses_{me.phone_number}', await client.export_session_string()))
        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        await state.clear()
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        await state.clear()
    finally:
        await state.clear()
