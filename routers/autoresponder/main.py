import os
from io import BytesIO

from aiogram import Router, types, F, Bot
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import BufferedInputFile
from aiogram.utils.text_decorations import markdown_decoration, html_decoration

from utils.keyboards import on_off_kb, start_kb, autoresponder_kb, autoresponder_users

from utils.db import db

router = Router()


class AutoresponderStates(StatesGroup):
    on_off = State()
    autoresponder_preview = State()
    waiting_text = State()
    waiting_photo = State()
    select_users_state = State()


@router.callback_query(F.data == 'autoresponder')
async def autoresponder(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    status = db.get('core.autoresponder', 'status', False)
    status_text = 'üö´ –í—ã–∫–ª—é—á–µ–Ω–æ'
    if status:
        status_text = '‚úÖ –í–∫–ª—é—á–µ–Ω–æ'

    await call.message.answer(f'‚úÖ –ê–≤—Ç–æ-–û—Ç–≤–µ—Ç—á–∏–∫ ‚Äî –§—É–Ω–∫—Ü–∏—è –ø–æ –∞–≤—Ç–æ-–æ—Ç–≤–µ—Ç—É –≤—Å–µ–º —á–∞—Ç–∞–º, –≤ –≤–∫–ª—é—á—ë–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏'
                              f'\n'
                              f'\n ‚ö°Ô∏è –°—Ç–∞—Ç—É—Å: {status_text}'
                              , reply_markup=on_off_kb())
    await state.set_state(AutoresponderStates.on_off)


@router.callback_query(F.data.in_(['autoresponder_on', 'autoresponder_off']), AutoresponderStates.on_off)
async def on_off(call: types.CallbackQuery, state: FSMContext):
    data = call.data.split('_')
    await call.message.delete()
    if data[1] == 'on':
        await state.set_state(AutoresponderStates.autoresponder_preview)
        await call.message.answer('–¢–£–¢ –ù–£–ñ–ù–û –ò–ó–ú–ï–ù–ò–¢–¨ –¢–ï–ö–°–¢', reply_markup=autoresponder_kb())
        return

    db.set('core.autoresponder', 'status', False)
    await call.message.answer('üö´ –ê–≤—Ç–æ-–û—Ç–≤–µ—Ç—á–∏–∫ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –≤—ã–∫–ª—é—á—ë–Ω!')

    await call.message.answer(f'üî• –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ¬´–Æ–∑–µ—Ä –ö–æ–Ω—Ç—Ä–æ–ª—å –ë–æ—Ç–∞¬ª\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ', reply_markup=start_kb.as_markup())

    await state.clear()


@router.callback_query(F.data == 'autoresponder_back', AutoresponderStates.autoresponder_preview)
async def cancel(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()

    await call.message.answer(f'üî• –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ¬´–Æ–∑–µ—Ä –ö–æ–Ω—Ç—Ä–æ–ª—å –ë–æ—Ç–∞¬ª\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ', reply_markup=start_kb.as_markup())

    await state.clear()


# === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ ===
@router.callback_query(F.data == 'autoresponder_add_text', AutoresponderStates.autoresponder_preview)
async def add_text(call: types.CallbackQuery, state: FSMContext):
    if call.message.photo:
        await call.message.edit_caption(call.inline_message_id, 'üìÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è', reply_markup=None)
    else:
        await call.message.edit_text('üìÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è', reply_markup=None)
    await state.set_state(AutoresponderStates.waiting_text)


@router.message(AutoresponderStates.waiting_text)
async def check_text(message: types.Message, state: FSMContext):
    await message.delete()

    formatted_text = html_decoration.unparse(message.text, message.entities)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç
    await state.update_data(message_text=formatted_text)

    data = await state.get_data()
    photo = data.get("photo")

    if photo:
        await message.answer_photo(photo=photo, caption=formatted_text,
                                   reply_markup=autoresponder_kb())
    else:
        await message.answer(formatted_text, reply_markup=autoresponder_kb())

    await state.set_state(AutoresponderStates.autoresponder_preview)


# === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ ===
@router.callback_query(F.data == 'autoresponder_add_photo', AutoresponderStates.autoresponder_preview)
async def add_photo(call: types.CallbackQuery, state: FSMContext):
    if call.message.text:
        await call.message.edit_text("üñº –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è", reply_markup=None)
    else:
        await call.message.answer("üñº –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è")

    await state.set_state(AutoresponderStates.waiting_photo)


@router.message(AutoresponderStates.waiting_photo, F.photo)
async def check_photo(message: types.Message, state: FSMContext, bot: Bot):
    await message.delete()

    # –°–∫–∞—á–∏–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
    file = await bot.get_file(message.photo[-1].file_id)
    byte_stream = BytesIO()
    await bot.download_file(file.file_path, destination=byte_stream)
    byte_stream.seek(0)
    photo = BufferedInputFile(byte_stream.read(), filename="photo.jpg")

    # –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
    file_path = f"photos/photo.jpg"

    # –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –Ω–µ—Ç
    os.makedirs("photos", exist_ok=True)

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –Ω–∞ –¥–∏—Å–∫
    await bot.download_file(file.file_path, destination=file_path)

    await state.update_data(photo=photo, photo_byte=file_path)

    # –î–æ—Å—Ç–∞—ë–º —Ç–µ–∫—Å—Ç (–µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å)
    data = await state.get_data()
    message_text = data.get("message_text", "")

    await message.answer_photo(photo=photo, caption=message_text,
                               reply_markup=autoresponder_kb())

    await state.set_state(AutoresponderStates.autoresponder_preview)


@router.callback_query(F.data == 'autoresponder_run', AutoresponderStates.autoresponder_preview)
async def go(call: types.CallbackQuery, state: FSMContext):
    await call.message.delete()
    await call.message.answer('ü¶æ –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç—ã. –ù–∞ –Ω–∏—Ö –±—É–¥–µ—Ç –≤–∫–ª—é—á–µ–Ω –∞–≤—Ç–æ-–æ—Ç–≤–µ—Ç—á–∏–∫', reply_markup=await autoresponder_users(state))
    await state.set_state(AutoresponderStates.select_users_state)


@router.callback_query(F.data.startswith('autoresponder-user'), AutoresponderStates.select_users_state)
async def select_user(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    key = f"btn_{call.data.split('_')[2]}"

    current = data.get(key, False)
    new_value = not current

    if new_value == current:
        return

    await state.update_data({key: new_value})

    new_markup = await autoresponder_users(state)

    if call.message.reply_markup == new_markup:
        return

    await call.message.edit_reply_markup(reply_markup=new_markup)
    await call.answer("–û–±–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ" if new_value else "–û—Ç–∫–ª—é—á–µ–Ω–æ ‚ùå")


@router.callback_query(F.data == 'autoresponder_run')
async def run(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    message_text = data.get('message_text')
    photo = data.get('photo_byte', None)

    selected_ids = [int(k.split('_')[1]) for k, v in data.items() if k.startswith('btn_') and v is True]

    db.set('core.autoresponder', 'status', True)

    value = {
        'users': selected_ids
    }

    db.set('core.autoresponder', 'users', value)

    value = {
        'text': message_text,
        'photo': photo
    }

    db.set('core.autoresponder', 'data', value)

    await call.message.delete()
    await call.message.answer('‚úÖ –ê–≤—Ç–æ-–û—Ç–≤–µ—Ç—á–∏–∫ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á—ë–Ω!')
    await state.clear()
